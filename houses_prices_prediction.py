# -*- coding: utf-8 -*-
"""Houses_prices_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PoseLQUqAP5fn6N9_D-Oi4gCYk3gDweC
"""

#pip install shap

import shap
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

df = pd.read_csv('/content/house_data.csv')
df.shape

"""There are 5000 observations and 16 variables in our dataset. Each observation correspond to a house. Now, let's see the data."""

df.head(5)

# Count the number of NA's in each column
df.isna().sum()

# Now we are check the type of variables of the table
df.info()

def IdentifyKeyWord(x, word):
    if word in x.lower():
        return 1
    else:
        return 0

# Kitchen Features
df['KF_Dishwasher'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'dishwasher'))
df['KF_GarbageDisposal'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'garbage disposal'))
df['KF_Refrigerator'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'refrigerator'))
df['KF_DoubleSink'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'double sink'))
df['KF_Microwave'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'microwave'))
df['KF_Oven'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'oven'))
df['KF_Compactor'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'compactor'))
df['KF_Freezer'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'freezer'))
df['KF_ElectricRange'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'electric range'))
df['KF_Island'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'island'))
df['KF_GasRange'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'gas range'))
df['KF_Countertops'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'countertops'))
df['KF_Desk'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'desk'))
df['KF_Granite'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'granite'))
df['KF_Concrete'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'concrete'))
df['KF_WaterPurifier'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'water purifier'))
df['KF_Quartz'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'quartz'))
df['KF_Pantry'] = df.kitchen_features.apply(lambda x: IdentifyKeyWord(x, 'pantry'))

df[['KF_Dishwasher','KF_GarbageDisposal','KF_Refrigerator','KF_DoubleSink','KF_Microwave','KF_Oven','KF_Compactor',
    'KF_Freezer','KF_ElectricRange','KF_Island','KF_GasRange','KF_Countertops','KF_Desk','KF_Granite','KF_Concrete',
    'KF_WaterPurifier','KF_Quartz','KF_Pantry']].sum()

# Floor covering
df['FC_Stone'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'natural stone'))
df['FC_Ceramic'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'ceramic tile'))
df['FC_Laminate'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'laminate'))
df['FC_Wood'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'wood'))
df['FC_Carpet'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'carpet'))
df['FC_Concrete'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'concrete'))
df['FC_MexicanTile'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'mexican tile'))
df['FC_Other'] = df.floor_covering.apply(lambda x: IdentifyKeyWord(x, 'other'))

df[['FC_Stone','FC_Ceramic','FC_Laminate','FC_Wood','FC_Carpet','FC_Concrete','FC_MexicanTile','FC_Other']].sum()

dfg = df.groupby(['zipcode'])['sold_price'].mean()
dfg.plot(kind='bar', title='Zipcode vs average price', ylabel='Mean price',
         xlabel='zipcode', figsize=(12, 7))

dfg = df.groupby(['FC_Stone'])['sold_price'].mean()
dfg.plot(kind='bar', ylabel='Mean price',
         xlabel='FC_Other')#, figsize=(12, 7))

df.columns

def trans_lat(x):
  y = x.replace(',','').replace('.','')
  return (y[:2] + '.' + y[2:])
def trans_lon(x):
  y = x.replace(',','').replace('.','')
  return (y[:4] + '.' + y[4:])

df['latitude'] = df.latitude.apply(trans_lat).astype(float)
df['longitude'] = df.longitude.apply(trans_lon).astype(float)

# Filling missing values
df['HOA'] = df.HOA.str.replace('None','55') #0
df['HOA'] = df.HOA.str.replace(',','.')
df['HOA'] = df.HOA.astype(float)
#df['HOA'] = df.HOA.astype(int)
df['bathrooms'] = df.bathrooms.str.replace('None','4')
df['bathrooms'] = df.bathrooms.astype(float).round()
df['sqrt_ft'] = df.sqrt_ft.str.replace('None','3047') #'3512'
df['sqrt_ft'] = df.sqrt_ft.astype(float)
df['garage'] = df.garage.str.replace('None','3')
df['garage'] = df.garage.astype(float).round()
df['lot_acres'] = df.lot_acres.fillna(1)
df['fireplaces'] = df.fireplaces.fillna(2)
df['year_built'] = df.year_built.replace(0,2019)

df.drop(['MLS','floor_covering','kitchen_features'], axis = 1, inplace = True)
df.info()

fig = px.scatter_mapbox(df,lat = 'latitude', lon = 'longitude', color = 'sold_price',
                        center=dict(lon=-110.9, lat=32.3),
                       zoom = 9, mapbox_style = 'open-street-map')
fig

df['latitude2'] = df['latitude']**2
df['longitude2'] = df['longitude']**2
X = df.to_numpy()
y = X[:,0]
X = X[:,1:]

class MultiLinearRegression():

  def fit(self, X, y):
    self.W = np.linalg.solve(X.T@X, X.T@y)

  def predict(self, X):

    return np.matmul(X, self.W)

lr_mul = MultiLinearRegression()

lr_mul.fit(X,y)

y_hat = lr_mul.predict(X)

plt.figure(figsize=(10,7))
plt.scatter(y, y_hat, s=8)
plt.plot(y,y, color = '#FF0070')

def R2(Y, Y_hat):
  return(1-(np.sum((Y-Y_hat)**2)/np.sum((Y-np.mean(Y))**2)))

R2(y, y_hat)

class KNNRegressor:

  def fit(self, X, y):
    self.X = X
    self.y = y

  def predict(self, X, K, epsilon = 1e-3):
    N = len(X)
    y_hat = np.zeros(N)
    for i in range(N):
      dist2 = np.sum((self.X-X[i])**2, axis = 1)
      idxt = np.argsort(dist2)[:K]
      gamma_K = np.exp(-dist2[idxt]) / np.exp(-dist2[idxt]).sum()
      y_hat[i] = gamma_K.dot(self.y[idxt])

    return y_hat

knn_reg = KNNRegressor()

df.columns

df[['sold_price', 'longitude', 'latitude', 'lot_acres', 'taxes',
       'year_built', 'bedrooms', 'bathrooms', 'sqrt_ft', 'garage',
       'fireplaces', 'HOA']].corr()

df.sold_price.plot.box()

"""### Treating/Removing **Outliers**"""

# Removing outliers from sold price
print(df.sold_price.quantile(0.05))
print(df.sold_price.quantile(0.98))

#df['sold_price'] = np.where(df['sold_price'] > 1700000, 1700000, df['sold_price'])
df = df[df['sqrt_ft'] > 2000]
df = df[df['sold_price'] < 1800000]
df.sold_price.plot.hist(bins = 30)
df.shape

# Removing outliers from the rest of the data
ax = df[['sold_price','longitude','latitude','lot_acres','taxes','year_built','sqrt_ft','HOA']].plot(kind='box', figsize = (15,7),
                                                                                                     title='boxplot', showmeans=True)
plt.show()

df[df['taxes'] > 500000]

df = df[df['taxes'] < 500000]

ax = df[['longitude','latitude','lot_acres','taxes','year_built','sqrt_ft','HOA']].plot(kind='box', figsize = (15,7),
                                                                                                    title='boxplot', showmeans=True)
plt.show()

print(df.lot_acres.quantile(0.99))
print(df.lot_acres.quantile(0.5))
df['lot_acres'] = np.where(df['lot_acres'] > 57, 57, df['lot_acres'])
df.lot_acres.plot.box()

print(df.latitude.quantile(0.9))
print(df.latitude.quantile(0.5))
print(df.latitude.quantile(0.1))
df['latitude'] = np.where(df['latitude'] > 32.45, 32.45, df['latitude'])
df['latitude'] = np.where(df['latitude'] < 32.22, 32.22, df['latitude'])
df.latitude.plot.box()

print(df.longitude.quantile(0.9))
print(df.longitude.quantile(0.5))
print(df.longitude.quantile(0.1))
df['longitude'] = np.where(df['longitude'] > -110.76, -110.76, df['longitude'])
df['longitude'] = np.where(df['longitude'] < -111.05, -111.05, df['longitude'])
df.longitude.plot.box()

print(df.HOA.quantile(0.9))
print(df.HOA.quantile(0.5))
df['HOA'] = np.where(df['HOA'] > 170, 170, df['HOA'])
df.HOA.plot.box()

print(df.year_built.quantile(0.1))
print(df.year_built.quantile(0.5))
df['year_built'] = np.where(df['year_built'] < 1970, 1970, df['year_built'])
df.year_built.plot.box()

print(df.sqrt_ft.quantile(0.95))
print(df.sqrt_ft.quantile(0.5))
df['sqrt_ft'] = np.where(df['sqrt_ft'] > 5664, 5664, df['sqrt_ft'])#4592
df.sqrt_ft.plot.box()

print(df.taxes.quantile(0.9))
print(df.taxes.quantile(0.5))
df['taxes'] = np.where(df['taxes'] > 9595, 9595, df['taxes'])
df.taxes.plot.box()

df[['sold_price', 'longitude', 'latitude', 'lot_acres', 'taxes',
       'year_built', 'bedrooms', 'bathrooms', 'sqrt_ft', 'garage',
       'fireplaces', 'HOA']].corr()

vars = ['sold_price','garage','sqrt_ft','longitude','latitude','bedrooms','fireplaces','taxes',
        'HOA','year_built','lot_acres','FC_Ceramic'] #,,'FC_Wood''KF_Refrigerator'
        #'KF_ElectricRange','bathrooms','zipcode','FC_Stone','KF_Compactor','KF_Freezer'
df = df[vars]

## Split database
i = np.arange(len(df))
np.random.shuffle(i)
train = df.iloc[i[:int(len(df)*0.75)]]
test = df.iloc[i[int(len(df)*0.75):int(len(df)*0.85)]]
validation = df.iloc[i[int(len(df)*0.85):]]

def normalize_function(data):
   min = np.amin(data,axis=0)
   max = np.amax(data,axis=0)
   return (data - min)/(max-min)

print(train.shape)
print(test.shape)
print(validation.shape)

# Transform all datasets into arrays
X_train = train.to_numpy()
y_train = X_train[:,0]
X_train = X_train[:,1:]
X_test = test.to_numpy()
y_test = X_test[:,0]
X_test = X_test[:,1:]
X_validation = validation.to_numpy()
y_validation = X_validation[:,0]
X_validation = X_validation[:,1:]
X_train = normalize_function(X_train)
X_test = normalize_function(X_test)
X_validation = normalize_function(X_validation)

lr_mul.fit(X_train,y_train)
y_hat = lr_mul.predict(X_train)
#plt.figure(figsize=(10,7))
plt.scatter(y_train, y_hat, s=8)
plt.plot(y_train,y_train, color = '#FF0070')

"""**Model 1: Simple Linear Regression**"""

R2(y_train, y_hat)

y_hat = lr_mul.predict(X_test)
R2(y_test, y_hat)

"""**Model 2: K-Nearest Neightbors**"""

def performance(XTrain, yTrain, XTest, yTest, K):
  knn_reg.fit(XTrain,yTrain)
  yTrain_hat = knn_reg.predict(XTrain, K)
  yTest_hat = knn_reg.predict(XTest, K)
  return np.array([R2(yTrain, yTrain_hat), R2(yTest, yTest_hat)])

K_grid = np.array([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])
R2_results = []

for k in K_grid:
  R2_results.append( performance(X_train, y_train, X_test, y_test, k) )

df_results = pd.DataFrame({'Neighbors': K_grid,
                           'Train': np.array(R2_results)[:,0],
                           'Test': np.array(R2_results)[:,1]})
df_results

plt.figure(figsize = (12,7))
plt.axvline(x=15, alpha = 0.4, color = '#36AF1E', linestyle='dashdot')
plt.plot(df_results.Neighbors, df_results.Train, color ='#AF1E1E', linewidth=5, alpha = 0.7)
plt.plot(df_results.Neighbors, df_results.Test, color = '#1E89AF', linewidth=5, alpha = 0.7)
plt.scatter(df_results.Neighbors, df_results.Train, color ='#AF1E1E', label = 'Train', linewidths = 8, alpha = 0.7)
plt.scatter(df_results.Neighbors, df_results.Test, color = '#1E89AF', label = 'Validation', linewidths = 8, alpha = 0.7)
plt.xlabel('K-Neighbors', size = 'x-large')
plt.ylabel('R-Squared', size = 'x-large')
plt.legend(fontsize=15)
plt.xticks(np.arange(3, 26, 1))
plt.show()

yvalidation_hat = knn_reg.predict(X_validation, 15)
R2(y_validation, yvalidation_hat)

f = lambda x: knn_reg.predict(x, 9)
med = np.median(X_train, axis = 0).reshape(1, X_train.shape[1])

explainer = shap.Explainer(f, med, 
                           feature_names = ['garage','sqrt_ft','longitude','latitude','bedrooms','fireplaces','taxes','HOA','year_built','lot_acres','FC_Ceramic'])
shap_values = explainer(X_validation)

shap.plots.waterfall(shap_values[10])

shap.plots.beeswarm(shap_values, max_display=12)

shap.plots.bar(shap_values, max_display=12)

